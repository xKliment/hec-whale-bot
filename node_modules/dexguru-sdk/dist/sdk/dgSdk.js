"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var httpClient_1 = __importDefault(require("../client/httpClient"));
var DexGuru = /** @class */ (function () {
    function DexGuru(apiKey, endpoint) {
        var _this = this;
        this.getTransactions = function (chain_id, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp, wallet_category) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/transactions", {
                        chain_id: chain_id,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                        wallet_category: wallet_category,
                    })];
            });
        }); };
        this.getTxsSwaps = function (chain_id, token_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp, wallet_category) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/transactions/swaps", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                        wallet_category: wallet_category,
                    })];
            });
        }); };
        this.getTxsBurns = function (chain_id, token_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/transactions/burns", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getTxsMints = function (chain_id, token_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/transactions/mints", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getAmmsSwaps = function (chain_id, amms, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp, wallet_category) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/swaps", {
                        chain_id: chain_id,
                        amms: amms,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                        wallet_category: wallet_category,
                    })];
            });
        }); };
        this.getAmmsBurns = function (chain_id, amms, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/burns", {
                        chain_id: chain_id,
                        amms: amms,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getAmmsMints = function (chain_id, amms, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/mints", {
                        chain_id: chain_id,
                        amms: amms,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getAmmSwaps = function (chain_id, amm, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp, wallet_category) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/{amm}/swaps", {
                        chain_id: chain_id,
                        amm: amm,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                        wallet_category: wallet_category,
                    })];
            });
        }); };
        this.getAmmBurns = function (chain_id, amm, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/{amm}/burns", {
                        chain_id: chain_id,
                        amm: amm,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getAmmMints = function (chain_id, amm, token_address, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/{amm}/mints", {
                        chain_id: chain_id,
                        amm: amm,
                        token_address: token_address,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getAllAmmInventory = function (chain_id) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms", { chain_id: chain_id })];
            });
        }); };
        this.getAmmInventory = function (chain_id, amm) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/amms/{amm}", { chain_id: chain_id, amm: amm })];
            });
        }); };
        this.getTokensFinance = function (chain_id, token_addresses, verified, sort_by, order, limit, offset) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/market", { chain_id: chain_id, token_addresses: token_addresses, verified: verified, sort_by: sort_by, order: order, limit: limit, offset: offset })];
            });
        }); };
        this.getTokenFinance = function (chain_id, token_address) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/market", { chain_id: chain_id, token_address: token_address })];
            });
        }); };
        this.getTokenMarketHistory = function (chain_id, token_address, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/market/history", { chain_id: chain_id, token_address: token_address, begin_timestamp: begin_timestamp, end_timestamp: end_timestamp })];
            });
        }); };
        this.getTokensInventory = function (chain_id, search_string, limit, offset, verified) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens", { chain_id: chain_id, search_string: search_string, limit: limit, offset: offset, verified: verified })];
            });
        }); };
        this.getTokenInventoryByAddress = function (chain_id, token_address) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}", { chain_id: chain_id, token_address: token_address })];
            });
        }); };
        this.getTokenTransactions = function (chain_id, token_address, amm, wallet_category, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/transactions", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        wallet_category: wallet_category,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getTokenSwaps = function (chain_id, token_address, begin_timestamp, end_timestamp, wallet_category, amm, sort_by, order, limit, offset) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/transactions/swaps", {
                        chain_id: chain_id,
                        token_address: token_address,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                        wallet_category: wallet_category,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                    })];
            });
        }); };
        this.getTokenBurns = function (chain_id, token_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/transactions/burns", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getTokenMints = function (chain_id, token_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/tokens/{token_address}/transactions/mints", {
                        chain_id: chain_id,
                        token_address: token_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getWalletTransactions = function (chain_id, wallet_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets/{wallet_address}/transactions", {
                        chain_id: chain_id,
                        wallet_address: wallet_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getWalletSwaps = function (chain_id, wallet_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets/{wallet_address}/transactions/swaps", {
                        chain_id: chain_id,
                        wallet_address: wallet_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getWalletBurns = function (chain_id, wallet_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets/{wallet_address}/transactions/burns", {
                        chain_id: chain_id,
                        wallet_address: wallet_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getWalletMints = function (chain_id, wallet_address, amm, sort_by, order, limit, offset, begin_timestamp, end_timestamp) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets/{wallet_address}/transactions/mints", {
                        chain_id: chain_id,
                        wallet_address: wallet_address,
                        amm: amm,
                        sort_by: sort_by,
                        order: order,
                        limit: limit,
                        offset: offset,
                        begin_timestamp: begin_timestamp,
                        end_timestamp: end_timestamp,
                    })];
            });
        }); };
        this.getWalletsInfo = function (chain_id, wallet_addresses) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets", { chain_id: chain_id, wallet_addresses: wallet_addresses })];
            });
        }); };
        this.getWalletInfo = function (chain_id, wallet_address) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}/wallets/{wallet_address}", { chain_id: chain_id, wallet_address: wallet_address })];
            });
        }); };
        this.getAllChains = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain", {})];
            });
        }); };
        this.getChain = function (chain_id) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/chain/{chain_id}", { chain_id: chain_id })];
            });
        }); };
        this.getEvents = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, httpClient_1.default)("get", this.endpoint, this.apiKey, "/v1/event/", {})];
            });
        }); };
        this.apiKey = apiKey;
        this.endpoint = endpoint;
    }
    return DexGuru;
}());
exports.default = DexGuru;
//# sourceMappingURL=dgSdk.js.map